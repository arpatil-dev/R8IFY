// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(60)
  email     String    @unique @db.VarChar(100)
  password  String    @db.VarChar(255)
  address   String?   @db.VarChar(400)
  role      Role      @default(NORMAL_USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isFirstLogin Boolean   @default(true) 

  // Relations
  stores    Store[]   @relation("StoreOwner") // Store owner
  ratings   Rating[]  // Ratings given by user
}

model Store {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(60)
  address   String    @db.VarChar(400)
  email     String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  ownerId   String
  owner     User      @relation("StoreOwner", fields: [ownerId], references: [id])
  ratings   Rating[]

  avgRating Float     @default(0)
}

model Rating {
  id        String   @id @default(uuid())
  value     Int      @default(0) // 1â€“5, default 0 if not rated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  storeId   String
  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])

  @@unique([userId, storeId]) // 1 rating per user per store
}

enum Role {
  SYSTEM_ADMINISTRATOR
  STORE_OWNER
  NORMAL_USER
}